/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.4.1/userguide/tutorial_java_projects.html
 */

plugins {
  id 'java'
  id 'org.springframework.boot' version '2.3.1.RELEASE'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id "org.sonarqube" version "3.0"
  id 'maven-publish'
}
group = 'cn.ac.bmi.cloudphr'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  jcenter()
  mavenCentral()
}

dependencies {
  compile 'org.jsoup:jsoup:1.13.1'
  compile 'cn.hutool:hutool-all:5.3.8'
  compile 'me.tongfei:progressbar:0.8.1'
  implementation 'org.springframework.boot:spring-boot-starter-web:2.3.1.RELEASE'
  implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.3.1.RELEASE'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
  compile 'org.xerial:sqlite-jdbc:3.32.3'
  compile 'com.github.gwenn:sqlite-dialect:0.1.0'
  implementation 'com.google.guava:guava:28.2-jre'
  testImplementation 'org.testng:testng:7.1.1'
}

checkstyle {
  toolVersion = '8.39'
  configFile = project(':').file('config/checkstyle/checkstyle.xml')
  configProperties = [ "suppressionFile" : project(':').file('config/checkstyle/suppressions.xml')]
}

application {
    mainClassName = 'cn.ac.bmi.cloudphr.ckmirror.App'
}
test {
  useTestNG() {
    useDefaultListeners = true
  }

  testLogging {
    events "failed" //, "passed", "skipped", "standardOut", "standardError"
    afterSuite { desc, result ->
      if (!desc.parent) {
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true
  }
}

sonarqube {
  properties {
    property 'sonar.host.url', 'https://sonarcloud.io'
    property "sonar.organization", "cloudphr"
    property "sonar.projectKey", "cloudphr_ckmirror"
    property "sonar.sourceEncoding", "UTF-8"
    property 'sonar.jacoco.reportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
  }
}

tasks['jacocoTestReport'].dependsOn test
tasks['sonarqube'].dependsOn jacocoTestReport

publishing {
  repositories {
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/cloudphr/mindmap"
      credentials {
        username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
        password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
      }
    }
  }

  publications {
      gpr(MavenPublication) {
          from(components.java)
      }
  }
}
